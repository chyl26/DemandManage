@model ProductInfoModel
@{
    ViewBag.Title = Model.ProductName + "需求文档";
    Layout = "../Shared/_LayoutAdminLTE.cshtml";
}

<head>
    <!--summernote-->
    <link href="~/Content/summernote/summernote.css" rel="stylesheet" />
    <script src="~/Content/summernote/summernote.js"></script>
    <script src="~/Content/summernote/summernote-zh-CN.js"></script>
</head>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <!-- 内容标题 -->
    <section class="content-header">
        <h1>
            @Model.ProductName
            <small>需求文档</small>
        </h1>
        <!--  导航地图  -->
        <ol class="breadcrumb">
            <li><a href="~/Home/Index"><i class="fa fa-dashboard"></i> Home</a></li>
            <li><a href="~/ProductInfo/Index"><i class="fa fa-dashboard"></i> 产品管理</a></li>
            <li class="active">产品需求文档</li>
        </ol>
    </section>

    <!-- 内容Panel -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            @*<div class="box-header with-border">
                    <h3 class="box-title">创建新产品</h3>
                </div>*@
            <div class="box-body">
                <!--  这是写入要展示的内容  -->
                <!-- 教程详情 -->
                <div class="container">
                    <!-- 底部布局 -->
                    <div class="container">
                        <div class="row">
                            <div class="col-md-3">
                                <nav class="sidebar-nav hidden-print hidden-xs hidden-sm">
                                    <ul class="nav sidebar-ul">
                                        <!-- 导航开始 -->
                                    </ul>
                                </nav>
                            </div>

                            <div class="col-md-9">
                                <!--文档标题名称-->
                                <h2 class="blog-post-title">@Model.ProductName</h2>
                                <p>
                                    @Model.DisplayName by
                                    @Model.CreateAt
                                </p>
                                <!--产品文档内容-->
                                <div id="content_body">
                                    <!--功能性需求详情-->
                                    <hr />
                                    <h2>功能性需求</h2>
                                    @foreach (var Detaileds in Model.RepDetaileds)
                                    {
                                        <h3>@Detaileds.RepName 优先级：@Detaileds.Priority</h3>
                                        <p>@Detaileds.user.DisplayName by @Detaileds.CreateAt</p>
                                        @Html.LabelFor(m => m.RepDetaileds)
                                        <!--将Html转换成文本输出-->
                                        <pre>@Html.Raw(HttpUtility.HtmlDecode(Detaileds.RepDescribe))</pre>

                                        if (Detaileds.Revision != null)
                                        {
                                            <label>修订记录</label>
                                            <p>@Detaileds.Reviser by @Detaileds.UpdateAt</p>
                                            <pre>@Detaileds.Revision</pre>
                                        }
                                    }
                                    <!--交互需求详情-->
                                    <hr />
                                    <h2>交互需求</h2>
                                    @foreach (var Interactives in Model.Interactives)
                                    {
                                        <h3>@Interactives.InteractiveName 优先级：@Interactives.Priority</h3>
                                        <p>@Interactives.user.DisplayName by @Interactives.CreateAt</p>
                                        @Html.LabelFor(m => m.RepDetaileds)
                                        <!--将Html转换成文本输出-->
                                        <pre>@Html.Raw(HttpUtility.HtmlDecode(Interactives.InteractiveDescribe))</pre>

                                        if (Interactives.Revision != null)
                                        {
                                            <label>修订记录</label>
                                            <p>@Interactives.Reviser by @Interactives.UpdateAt</p>
                                            <pre>@Interactives.Revision</pre>
                                        }
                                    }

                                    <!--数据需求详情-->
                                    <hr />
                                    <h2>数据需求</h2>
                                    @foreach (var datas in Model.Datas)
                                    {
                                        <h3>@datas.DataName 优先级：@datas.Priority</h3>
                                        <p>@datas.user.DisplayName by @datas.CreateAt</p>
                                        @Html.LabelFor(m => m.RepDetaileds)
                                        <!--将Html转换成文本输出-->
                                        <pre>@Html.Raw(HttpUtility.HtmlDecode(datas.DataDescribe))</pre>

                                        if (datas.Revision != null)
                                        {
                                            <label>修订记录</label>
                                            <p>@datas.Reviser by @datas.UpdateAt</p>
                                            <pre>@datas.Revision</pre>
                                        }
                                    }

                                    <!--其它需求详情-->
                                    <hr />
                                    <h2>非功能性需求</h2>
                                    @foreach (var repOthers in Model.RepOthers)
                                    {
                                        <h3>@repOthers.RepOtherName 优先级：@repOthers.Priority</h3>
                                        <p>@repOthers.user.DisplayName by @repOthers.CreateAt</p>
                                        @Html.LabelFor(m => m.RepDetaileds)
                                        <!--将Html转换成文本输出-->
                                        <pre>@Html.Raw(HttpUtility.HtmlDecode(repOthers.RepOtherDescribe))</pre>

                                        if (repOthers.Revision != null)
                                        {
                                            <label>修订记录</label>
                                            <p>@repOthers.Reviser by @repOthers.UpdateAt</p>
                                            <pre>@repOthers.Revision</pre>
                                        }
                                    }
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
                <!--  这是写入要展示的内容  -->
            </div>
            <!-- /.box-body -->
        </div>
        <!-- /.box -->
    </section>
}






@section scripts{

    @*@Scripts.Render("~/bundles/tutorials_details")*@

    <script>
        var random = [];
        /* 设置上下的位移 */
        $('.sidebar-nav').affix({
            offset: {

                //防止在有顶部页面及其它内容的时候一开始就直接定位到上边距
                top: $('.sidebar-nav').offset().top - 29,

                //防止到达底部了，导航条还跟着下来
                bottom: ($('footer').outerHeight(true) +
                    $('.application').outerHeight(true)) + 40
            }
        });

        //将所有的标题的id设置成标题内容
        var num = 0;
        $(":header").each(function () {
            num++;
            $(this).attr("id", "title" + getRandom() + num);
        });


        function getRandom() {
            var max = 10000
            var randomNum = Math.floor(Math.random() * max + 1)
            if (random.indexOf(randomNum) == -1) {
                random.push(randomNum);
                return randomNum
            }
            return getRandom();
        }

        //存放所有的标题，测试的时候用
        var allh = new Array();

        jQuery(function () {

            function makeSildebar(h, hcurrent, prent) {

                var lis = "";
                var h_one = [];
                if (h.length > 0) {
                    h_one.push(h);
                }
                var h_other = null;
                h_other = h.nextUntil(prent, hcurrent);//查看后面所有同极标题
                var h_array = h_one;//存放当前所有的同极标题
                if (h_other.length > 0) {
                    $.each(h_other, function (index, domEle) {
                        h_array.push($(h_other[index]));
                    });
                    //h_array = h_one.concat(h_other);
                }
                //遍历度查找所有的子级元素
                var hnext = getchild(hcurrent);
                $.each(h_array, function (index, domEle) {

                    var parli = "";
                    parli = "<li>";

                    //				alert(index)
                    var idvalue = h_array[index].attr("id")
                    //				alert(idvalue)
                    //				var title = $(this).children("h2").length
                    var title = h_array[index].text();
                    //				alert(title)
                    parli += "<a href=\"#" + idvalue + "\">" + title + "</a>"

                    var ul = "";

                    allh.push(h_array[index].text());
                    if (hnext != null) {

                        var first = h_array[index].nextUntil(hcurrent, hnext + ":first");
                        if (first.length > 0) {

                            ul = "<ul class=\"nav\">";

                            var childlis = makeSildebar(first, hnext, hcurrent);

                            ul += childlis;

                            ul += "</ul>"
                        }

                    }

                    parli += ul;
                    parli += "</li>"
                    lis += parli;
                });

                return lis;
            }
            //h 所有的标题
            //hcurrent,所有的标题的h值(h1 ,h2 ...)
            //prent 当前标题的h值的父标签
            function makeSildebar_ok(h, hcurrent, prent) {

                var h_one = [];
                if (h.length > 0) {
                    h_one.push(h);
                }
                var h_other = null;
                h_other = h.nextUntil(prent, hcurrent);//查看后面所有同极标题
                var h_array = h_one;//存放当前所有的同极标题
                if (h_other.length > 0) {
                    h_array = h_one.concat(h_other);
                }
                //遍历度查找所有的子级元素
                var hnext = getchild(hcurrent);
                $.each(h_array, function (index, domEle) {
                    allh.push(h_array[index].text());
                    if (hnext != null) {
                        makeSildebar(h_array[index].nextUntil(hcurrent, hnext + ":first"), hnext, hcurrent);
                    }
                });
            }

            function getchild(h) {
                if (h == "h1") {
                    return "h2";
                } else if (h == "h2") {
                    return "h3";
                } else if (h == "h3") {
                    return "h4";
                } else if (h == "h4") {
                    return "h5";
                } else if (h == "h5") {
                    return "h6";
                } else {
                    return null;
                }
            }

            var firstTitleTag = null;
            var firstTag = null;
            if ($("#content_body").find("h1").length > 0) {
                firstTitleTag = $("#content_body h1:first");
                firstTag = "h1";
            } else if ($("#content_body h2").length > 0) {
                firstTitleTag = $("#content_body h2:first");
                firstTag = "h2";
            } else if ($("#content_body h3").length > 0) {
                firstTitleTag = $("#content_body h3:first");
                firstTag = "h3";
            } else if ($("#content_body h4").length > 0) {
                firstTitleTag = $("#content_body h4:first");
                firstTag = "h4";
            } else if ($("#content_body h5").length > 0) {
                firstTitleTag = $("#content_body h5:first");
                firstTag = "h5";
            } else if ($("#content_body h6").length > 0) {
                firstTitleTag = $("#content_body h6:first");
                firstTag = "h6";
            }

            if (firstTitleTag != null) {
                $("ul.sidebar-ul").append(makeSildebar(firstTitleTag, firstTag, ""));
            }
        })

        ! function (a) {
            a(function () {
                c = a(document.body);
                c.scrollspy({
                    target: ".sidebar-nav"
                })
            })
        }(jQuery);

    </script>
}

